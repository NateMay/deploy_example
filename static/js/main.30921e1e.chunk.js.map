{"version":3,"sources":["index.js"],"names":["EXAM_NAME","due","Date","MidtermExam","name","shortName","link","useState","dueTime","setDueTime","className","href","target","id","htmlFor","value","onChange","CountdownTimer","toDate","getSecondsDiff","date1","date2","Math","floor","getTime","s","n","totalSecondsRemaining","setSecondsLeft","minutesLeft","secondsLeft","setTimeout","ReactDOM","render","document","getElementById"],"mappings":"oNAOMA,EAAY,4BAGZC,EAAM,IAAIC,KAAK,6DASrB,SAASC,EAAT,GAA+C,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,UAAWC,EAAO,EAAPA,KACnC,EAA8BC,mBAASN,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAEA,OAAO,yBAAQC,UAAU,YAAlB,UACH,qBAAKA,UAAU,MAAf,SAAqB,oBAAIA,UAAU,MAAd,SAAqBN,MAC1C,qBAAKM,UAAU,MAAf,SAAqB,sBAAKA,UAAU,wBAAf,UACjB,sEAAwC,uFAAyD,uCAAzD,iBAAxC,uFACA,+HAAiG,oBAAGC,KAAML,EAAMM,OAAO,SAAtB,iBAAoCP,EAApC,iBAAjG,aAEJ,sBAAKK,UAAU,MAAMG,GAAG,YAAxB,UACI,sBAAKH,UAAU,WAAf,UACI,uBAAOI,QAAQ,gBAAf,mCACA,cAAC,IAAD,CAAgBC,MAAOP,EAASQ,SAAUP,OAI9C,qBAAKC,UAAU,WAAf,SACI,wBAAQG,GAAG,iBAAiBH,UAAU,YAAtC,SAAkD,cAACO,EAAD,CAAgBC,OAAQV,cAM1F,SAASW,EAAeC,EAAOC,GAC3B,OAAOC,KAAKC,OAAOH,EAAMI,UAAYH,EAAMG,WAAW,KAE1D,SAASC,EAAEC,GAAK,OAAW,IAAJA,EAAQ,GAAK,IAGpC,SAAST,EAAT,GAAmC,IAAVC,EAAS,EAATA,OACrB,EAAgDX,mBAASY,EAAeD,EAAQ,IAAIhB,OAApF,mBAAOyB,EAAP,KAA8BC,EAA9B,KAEMC,EAAcP,KAAKC,MAAMI,EAAsB,IAC/CG,EAAcH,EAAwB,GAAKE,EAKjD,OAJAE,YAAW,WACPH,EAAeT,EAAeD,EAAQ,IAAIhB,SAC3C,KAEG,GAAN,OAAU2B,EAAV,kBAA+BJ,EAAEI,GAAjC,gBAAqDC,EAArD,kBAA0EL,EAAEK,GAA5E,cA7CJE,IAASC,OAAO,qCACZ,cAAC,IAAD,UACI,gCAAQjC,MAEZ,cAACG,EAAD,CAAaC,KAAMJ,EAAWK,UARV,YAQsCC,KAP5C,mEAO6DL,IAAKA,OAC/EiC,SAASC,eAAe,U","file":"static/js/main.30921e1e.chunk.js","sourcesContent":["import React, {useState, useEffect, createRef} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Helmet } from 'react-helmet';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport DateTimePicker from 'react-datetime-picker';\n\nconst EXAM_NAME = 'SI 579 Practice Midterm 2';\nconst SHORT_EXAM_NAME = 'Midterm 2';\nconst EXAM_LINK = 'https://umich.instructure.com/courses/475967/assignments/1547537';\nconst due = new Date('Mon Nov 22 2021 16:05:00 GMT-0500 (Eastern Standard Time)')\n\nReactDOM.render(<>\n    <Helmet>\n        <title>{EXAM_NAME}</title>\n    </Helmet>\n    <MidtermExam name={EXAM_NAME} shortName={SHORT_EXAM_NAME} link={EXAM_LINK} due={due} />\n</>, document.getElementById('root'));\n\nfunction MidtermExam({name, shortName, link}) {\n    const [dueTime, setDueTime] = useState(due);\n\n    return <header className=\"container\">\n        <div className=\"row\"><h1 className=\"col\">{name}</h1></div>\n        <div className=\"row\"><div className=\"col exam instructions\">\n            <p>Complete all of the questions below. <strong>You should only need to edit the files under the <code>js/</code> directory.</strong> If you have any questions, please ask them via Slack in the #si-579-f21 channel.</p>\n            <p>When you are done, upload your code to GitHub and post the link to your code on Canvas (under <a href={link} target=\"_blank\">the {shortName} assignment</a>).</p>\n        </div></div>\n        <div className=\"row\" id=\"time-left\">\n            <div className=\"col-md-6\">\n                <label htmlFor=\"exam-due-date\">Turn your exam in by:</label>\n                <DateTimePicker value={dueTime} onChange={setDueTime} />\n                {/* <input ref={dateRef} type=\"date\" value=\"2021-11-22\" onChange={updateDueTime} id=\"exam-due-date\" />\n                <input ref={timeRef} type=\"time\" value=\"16:05\" onChange={updateDueTime} /> */}\n            </div>\n            <div className=\"col-md-6\">\n                <output id=\"exam-time-left\" className=\"float-end\"><CountdownTimer toDate={dueTime} /></output>\n            </div>\n        </div>\n    </header>;\n}\n\nfunction getSecondsDiff(date1, date2) {\n    return Math.floor((date1.getTime() - date2.getTime())/1000);\n}\nfunction s(n) { return n===1 ? '' : 's' }\n\n\nfunction CountdownTimer({toDate}) {\n    const [totalSecondsRemaining, setSecondsLeft] = useState(getSecondsDiff(toDate, new Date()));\n\n    const minutesLeft = Math.floor(totalSecondsRemaining/60);\n    const secondsLeft = totalSecondsRemaining - 60 * minutesLeft;\n    setTimeout(() => {\n        setSecondsLeft(getSecondsDiff(toDate, new Date()));\n    }, 1000);\n\n    return `${minutesLeft} minute${s(minutesLeft)} and ${secondsLeft} second${s(secondsLeft)} remaining`;\n}"],"sourceRoot":""}